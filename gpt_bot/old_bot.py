import pprint
import time
from dataclasses import dataclass, field, asdict
from typing import List

from aiogram import Bot, Dispatcher, executor, types
from main_keyboard import get_main_kb

import logging

import openai
from openai import APIError
from openai.error import RateLimitError, APIConnectionError, InvalidRequestError, AuthenticationError, \
    ServiceUnavailableError, Timeout

import config as config


# Configure logging
logging.basicConfig(level=logging.INFO, filename='bot.log', filemode='a')
# logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=config.TELEGA_TOKEN)
dp = Dispatcher(bot)
openai.api_key = config.OPENAI_API_TOKEN


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç chatgpt 3.5. \n–ò—Å–ø–æ–ª—å–∑—É—é –æ–ø–ª–∞—á–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=get_main_kb(message.from_user.id))

@dp.message_handler(commands=['st', 'status'])
async def send_status(message: types.Message):
    print('---------------------------')
    pprint.pp(asdict(data))
    await message.reply(f"–°—Ç–∞—Ç—É—Å –≤—ã–≤–µ–¥–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª—å.\n –î–∏–∞–ª–æ–≥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {count_symbols_in_dialog(data)} —Å–∏–º–≤–æ–ª–æ–≤ ")

@dp.message_handler(commands=['clear'])
async def clear_messages(message: types.Message):
    data.messages = []
    await message.reply(f"–î–∏–∞–ª–æ–≥ –æ—á–∏—â–µ–Ω.\n –î–∏–∞–ª–æ–≥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {count_symbols_in_dialog(data)} —Å–∏–º–≤–æ–ª–æ–≤ ")


@dataclass
class GPTMessage:
    role: str
    content: str

@dataclass
class ChatData:
    model: str = 'gpt-3.5-turbo'
    messages: List[GPTMessage] = field(default_factory=list)

data = ChatData()

def count_symbols_in_dialog(d: ChatData) -> int:
    res = 0
    for m in d.messages:
        res = res + len(m.content)
    return res

def correct_messages_number(arr : List[GPTMessage], n) -> List[GPTMessage]:
    total_key2_length = sum(len(d.content) for d in arr)
    i = 0
    while total_key2_length >= n and i < len(arr):
        total_key2_length -= len(arr[i].content)
        i += 1
    return arr[i:]

async def error_answer_and_log(msg:types.Message , text: str):
    await msg.answer(text)
    logging.error(text)



@dp.message_handler()
async def echo(message: types.Message):
    data.messages.append(GPTMessage(role='user', content=message.text))
    data.messages = correct_messages_number(data.messages, config.MAX_SYBOLS_IN_CHAT)
    msg = await message.answer(f"""üîé –ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n
        <i>–î–∏–∞–ª–æ–≥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {count_symbols_in_dialog(data)} —Å–∏–º–≤–æ–ª–æ–≤\n
        –í –¥–∏–∞–ª–æ–≥–µ {len(data.messages)} —Ä–µ–ø–ª–∏–∫</i>\n
        """, parse_mode="HTML")
    messages_list = [asdict(m) for m in data.messages]
    try:
        completion: openai.ChatCompletion = openai.ChatCompletion.create(
            model=data.model,
            messages=messages_list,
            stream = True
        )

        answer = ''
        role = ''
        begin_time = 0
        for chunk in completion:
            if 'role' in chunk['choices'][0]['delta']:
                role = chunk['choices'][0]['delta']['role']
            if 'content' in chunk['choices'][0]['delta']:
                answer = answer + chunk['choices'][0]['delta']['content']
                current_time = time.time()
                if current_time - begin_time > 2:
                    await msg.edit_text(answer)
                    begin_time = current_time

        await msg.edit_text(f'{answer} \n ---------------------')
        data.messages.append(
            GPTMessage(role=role, content=answer)
        )

        logging.info("--------------------------------------------------------------------")
        logging.info(f"–î–∏–∞–ª–æ–≥. –°–∏–º–≤–æ–ª—ã - {count_symbols_in_dialog(data)}, —Ä–µ–ø–ª–∏–∫–∏: {len(data.messages)}")
        logging.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç {message.from_user['id']}: {message.text[:30]}...")
        logging.info(f"–û—Ç–≤–µ—Ç: {answer[:30]}...")
    except APIError as e:
        err_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ API Error: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞"
        await error_answer_and_log(message, err_msg)
    except Timeout as e:
        err_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Timeout Error: {e} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞"
        await error_answer_and_log(message, err_msg)
    except RateLimitError as e:
        err_msg=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Rate Limit Error: {e} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Ä–µ–∂–µ"
        await error_answer_and_log(message, err_msg)
    except APIConnectionError as e:
        err_msg=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Connection Error: {e} –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏"
        await error_answer_and_log(message, err_msg)
    except InvalidRequestError as e:
        err_msg=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Invalid Request Error: {e} –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —á—Ç–æ-—Ç–æ –Ω–∞–∫–æ—Å—è—á–∏–ª. –°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –µ–º—É"
        await error_answer_and_log(message, err_msg)
    except AuthenticationError as e:
        err_msg=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Authentication Error: {e} –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–∞–∫–æ—Å—è—á–∏–ª —Å –∫–ª—é—á–∞–º–∏. –°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –µ–º—É"
        await error_answer_and_log(message, err_msg)
    except ServiceUnavailableError as e:
        err_msg=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Service Unavailable Error: {e} –°–µ—Ä–≤–∏—Å OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞–¥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å."
        await error_answer_and_log(message, err_msg)


if __name__ == '__main__':
    print('bot started...')
    executor.start_polling(dp, skip_updates=True)
