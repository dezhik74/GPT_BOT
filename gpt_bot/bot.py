import pprint
from dataclasses import dataclass, field, asdict
from typing import List

import openai

from aiogram import Bot, Dispatcher, executor, types


import logging

from openai import APIError
from openai.error import RateLimitError, APIConnectionError, InvalidRequestError, AuthenticationError, \
    ServiceUnavailableError, Timeout

import gpt_bot.config as config

# Configure logging
logging.basicConfig(level=logging.INFO, filename='bot.log', filemode='a')
# logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=config.TELEGA_TOKEN)
dp = Dispatcher(bot)
openai.api_key = config.OPENAI_API_TOKEN


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç chatgpt 3.5. \n–ò—Å–ø–æ–ª—å–∑—É—é –æ–ø–ª–∞—á–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É")

@dp.message_handler(commands=['st', 'status'])
async def send_status(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã st
    """
    print('---------------------------')
    pprint.pp(asdict(data))
    await message.reply(f"–°—Ç–∞—Ç—É—Å –≤—ã–≤–µ–¥–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª—å.\n –î–∏–∞–ª–æ–≥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {count_symbols(data)} —Å–∏–º–≤–æ–ª–æ–≤ ")

# @dp.message_handler()
# async def echo(message: types.Message):
#     res = ''
#     msg = await message.answer("üîé –ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    # print(message.text)
    # last_called = datetime.datetime.now()
    # throttle_sec = 0.5
    # for token in theb.Completion.create(message.text):
    #     res = res + token
    #     print(res)
    #     elapsed = datetime.datetime.now() - last_called
    #     remaining_time = throttle_sec - float(elapsed)
    #     print(f'last_called={last_called}; elaplsed={elapsed}; remaining_time={remaining_time}')
    #     if remaining_time > 0:
    #         last_called = datetime.datetime.now()
    #         await msg.edit_text(res)
    # await message.answer(res if res != '' else '–æ—Ç–≤–µ—Ç–∞ –Ω–µ –±—ã–ª–æ')

    # await msg.edit_text(res)
        # print(token)
    # await msg.delete()
    # bot.delete_message(message.chat.id, msg.message_id)
    # await message.answer(res)

@dataclass
class GPTMessage:
    role: str
    content: str

@dataclass
class ChatData:
    model: str = 'gpt-3.5-turbo'
    messages: List[GPTMessage] = field(default_factory=list)

data = ChatData()

def count_symbols(d: ChatData) -> int:
    res = 0
    for m in d.messages:
        res = res + len(m.content)
    return res

def clear_messages(arr : List[GPTMessage], n) -> List[GPTMessage]:
    total_key2_length = sum(len(d.content) for d in arr)
    i = 0
    while total_key2_length >= n and i < len(arr):
        total_key2_length -= len(arr[i].content)
        i += 1
    return arr[i:]

async def error_answer_and_log(msg:types.Message , text: str):
    await msg.answer(text)
    logging.error(text)


print(data)

@dp.message_handler()
async def echo(message: types.Message):
    data.messages.append(GPTMessage(role='user', content=message.text))
    data.messages = clear_messages(data.messages, config.MAX_SYBOLS_IN_CHAT)
    await message.answer(f"""üîé –ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n
        <i>–î–∏–∞–ª–æ–≥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {count_symbols(data)} —Å–∏–º–≤–æ–ª–æ–≤\n
        –í –¥–∏–∞–ª–æ–≥–µ {len(data.messages)} —Ä–µ–ø–ª–∏–∫</i>\n
        """, parse_mode="HTML")
    messages_list = [asdict(m) for m in data.messages]
    try:
        completion: openai.ChatCompletion = openai.ChatCompletion.create(
            model=data.model,
            messages=messages_list
        )
        data.messages.append(
            GPTMessage(role=completion.choices[0].message['role'],
                       content=completion.choices[0].message['content'])
        )

        await message.answer(f"""
            {completion.choices[0].message['content']} \n\n 
            –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ {completion['usage']['total_tokens']}
        """)
        logging.info("--------------------------------------------------------------------")
        logging.info(f"–î–∏–∞–ª–æ–≥. –°–∏–º–≤–æ–ª—ã - {count_symbols(data)}, —Ä–µ–ø–ª–∏–∫–∏: {len(data.messages)}")
        logging.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {completion['usage']['total_tokens']}")
        logging.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç {message.from_user['id']}: {message.text[:30]}...")
        logging.info(f"–û—Ç–≤–µ—Ç: {completion.choices[0].message['content'][:30]}...")
    except APIError as e:
        err_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ API Error: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞"
        await error_answer_and_log(message, err_msg)
    except Timeout as e:
        err_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Timeout Error: {e} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞"
        await error_answer_and_log(message, err_msg)
    except RateLimitError as e:
        err_msg=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Rate Limit Error: {e} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Ä–µ–∂–µ"
        await error_answer_and_log(message, err_msg)
    except APIConnectionError as e:
        err_msg=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Connection Error: {e} –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏"
        await error_answer_and_log(message, err_msg)
    except InvalidRequestError as e:
        err_msg=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Invalid Request Error: {e} –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —á—Ç–æ-—Ç–æ –Ω–∞–∫–æ—Å—è—á–∏–ª. –°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –µ–º—É"
        await error_answer_and_log(message, err_msg)
    except AuthenticationError as e:
        err_msg=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Authentication Error: {e} –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–∞–∫–æ—Å—è—á–∏–ª —Å –∫–ª—é—á–∞–º–∏. –°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –µ–º—É"
        await error_answer_and_log(message, err_msg)
    except ServiceUnavailableError as e:
        err_msg=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Service Unavailable Error: {e} –°–µ—Ä–≤–∏—Å OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞–¥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å."
        await error_answer_and_log(message, err_msg)




# @dp.message_handler()
# –≠—Ç–æ —á–µ—Ä–µ–∑ —Ö–∞–ª—è–≤–Ω—ã–π API
# async def echo(message: types.Message):
#     data.messages.append(GPTMessage(role='user', content=message.text))
#     headers = {'Content-Type': 'application/json'}
#     msg = await message.answer(f"üîé –ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... \n–î–∏–∞–ª–æ–≥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {count_symbols(data)} —Å–∏–º–≤–æ–ª–æ–≤")
#     print(f'data={asdict(data)}')
#     async with aiohttp.ClientSession() as session:
#         async with session.post(config.OPENAI_API_URL, headers=headers, json=asdict(data)) as resp:
#             print(resp.status)
#             json = await resp.json()
#             # print(json['choices'][0]['message']['content'])
#             pprint.pp(json)
#             data.messages.append(
#                 GPTMessage(role=json['choices'][0]['message']['role'],
#                            content=json['choices'][0]['message']['content']))
#             await message.answer(json["choices"][0]["message"]["content"])


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
